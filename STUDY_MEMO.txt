HTML
→HyperTextMarkupLanguage(マークアップ言語)
WEBブラウザに表示
→ドラッグ＆ドロップ（Alt + L + O）
<h1>
→ヘッドライン(見出し)
<p>
→パラグラフ（段落）
<title>
→タイトルバーの表示
タグを書く際の注意点
→タグの構造
→必ず半角英数字
→改行は<br>で行う
HTML5の書き方
→<!DOCTYPE html>　※ドキュメントタイプ
→<html lang="ja">※言語の指定
→<meta charset="UTF-8">※エンコード方式の指定
属性について
→<〇〇 属性名1＝”値1” 属性名2＝”値2” ……>
imgタグ
→<img src="ファイル名" width="横幅" height="高さ">
<a>タグ（ハイパーリンク）
→<a href="リンク先のアドレス" target="ターゲット名">○○</a>
<table>
→<table>
    <tr>
      <th>
        <td> </td>
      </th>
  </table>
  スタイルシート
  →CSS
  →HTMLタグに属性として付け足す
  →ヘッダーに<style>で記述
  →別ファイルに記述して読み込み
style属性について
→style="スタイル名1:値1; スタイル名2:値2;……"
colorの値
→16進数らしい
background-color
→背景色
<style>タグ
→<style>
  …スタイルの設定…
  </style>
→○○{スタイルの値}
CSSファイルの読み込み
→<link rel="stykesheet" href="ファイル名">
→HTMLファイルとCSSファイルを分けると楽かもしれない
ID
→特定のスタイルだけを設定
→#ID名 {……}
→1つのタグの中に1つ
→原則として同じ値を複数つけてはいけない
→IDはここを識別するもの
クラス
→class="スタイルのクラス名"
ブロック要素（段落：div）
→1つの独立した段落のように扱われるもの。その存語から切り離され、少し感覚をあけて表示される
インライン要素（：span）
→別の要素の中に埋め込まれるように扱われるもの。その前後から表示場所などが切り離されることなくつながった状態で表示される
スタイルシートの基本
→3つの設定方法：タグを使う・IDを使う・クラスを使う
→div：ブロック要素
→span：インライン要素
フォントのスタイル
→フォント名：　font-family:ファミリー名
→フォントサイズ：　font-size:サイズの指定(pt)
→ボールド表示：　font-weight:ボールドの指定(bold/plain)
→イタリックの表示：　font-style:イタリックの指定(italic/plain)
margin
→要素と要素の間の感覚を示すもの
→要素の内側の余白（という認識）
→margin: 5px 5px 5px 5px; 上右下左
padding
→要素の周りに余白を設定するもの
→要素の外側の余白（という認識）
→padding: 5px 5px 5px 5px; 上右下左
要素の位置と大きさについて
→width:要素の横幅の設定
→height:要素の高さの設定
→top:上からの距離を設定
→left:左からの距離を設定
→bottom:下からの距離を設定
→right:右からの距離を設定
position属性（要素の位置の変更）
→static:デフォルト設定。固定、スタイルの指定で変更不可。
→absolute:表示エリア全体の絶対値で設定。
→relative:デフォルトからの相対位置で設定。
Javascriptとは
→プログラミング言語
→Webブラウザの組み込み言語
→HTMLの中にJavascriptを書いておけばWebブラウザが勝手に実行してくれる
Javascriptの書き方
→<script>で囲んで書く
→document.write("書き出すテキスト");
→別ファイルから読み込むことも可能<script src="スクリプトファイル名">
→セミコロンして改行
値とリテラル
→値：数値
→リテラル：文字（literal）※「”（クウォート）」で囲む
変数
→宣言：var 変数名
→代入：変数 = 値
→宣言＆変数：var 変数名 = 値
条件演算子
→等しい：＝＝
→等しくない：！＝
→より小さい：＜
→より大きい：＞
→等しい、またはより小さい＜＝
→等しい、またはより大きい＞＝
代入演算子
→代入（＝）と四則演算（＋－＊／％）を同時に行う
インクリメント
→A++; var x = 10 + A++; →10 ＋ 2 ※足す前に増える
→++A; var x = 10 + ++A; →10 ＋ 1 ※次の足し算から増える
デクリメント
→B--;
→--B;
for
→初期化条件
→条件
→後処理
名前で配列を管理
→配列の書き方：　キー１：値１
→値の出し入れ
→配列[キー] = 値；
→変数 = 配列[キー]；
→番号では呼び出せない
変数のスコープ
→ローカル変数：その変数が宣言された関数の中だけでしか使えない
→グローバル変数：どこでも使える。関数の中でも使うことができる（そのページが閉じられるまで有効）
連想配列とオブジェクト
→ほとんど同じ。
→syohi_zei['tax'] → syohi_zei.tax でも同じ
→
→
→
→
→
→
→
→
→
→
→
→
→











