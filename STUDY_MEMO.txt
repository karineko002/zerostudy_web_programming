HTML
→HyperTextMarkupLanguage(マークアップ言語)
WEBブラウザに表示
→ドラッグ＆ドロップ（Alt + L + O）
<h1>
→ヘッドライン(見出し)
<p>
→パラグラフ（段落）
<title>
→タイトルバーの表示
タグを書く際の注意点
→タグの構造
→必ず半角英数字
→改行は<br>で行う
HTML5の書き方
→<!DOCTYPE html>　※ドキュメントタイプ
→<html lang="ja">※言語の指定
→<meta charset="UTF-8">※エンコード方式の指定
属性について
→<〇〇 属性名1＝”値1” 属性名2＝”値2” ……>
imgタグ
→<img src="ファイル名" width="横幅" height="高さ">
<a>タグ（ハイパーリンク）
→<a href="リンク先のアドレス" target="ターゲット名">○○</a>
<table>
→<table>
    <tr>
      <th>
        <td> </td>
      </th>
  </table>
  スタイルシート
  →CSS
  →HTMLタグに属性として付け足す
  →ヘッダーに<style>で記述
  →別ファイルに記述して読み込み
style属性について
→style="スタイル名1:値1; スタイル名2:値2;……"
colorの値
→16進数らしい
background-color
→背景色
<style>タグ
→<style>
  …スタイルの設定…
  </style>
→○○{スタイルの値}
CSSファイルの読み込み
→<link rel="stykesheet" href="ファイル名">
→HTMLファイルとCSSファイルを分けると楽かもしれない
ID
→特定のスタイルだけを設定
→#ID名 {……}
→1つのタグの中に1つ
→原則として同じ値を複数つけてはいけない
→IDはここを識別するもの
クラス
→class="スタイルのクラス名"
ブロック要素（段落：div）
→1つの独立した段落のように扱われるもの。その存語から切り離され、少し感覚をあけて表示される
インライン要素（：span）
→別の要素の中に埋め込まれるように扱われるもの。その前後から表示場所などが切り離されることなくつながった状態で表示される
スタイルシートの基本
→3つの設定方法：タグを使う・IDを使う・クラスを使う
→div：ブロック要素
→span：インライン要素
フォントのスタイル
→フォント名：　font-family:ファミリー名
→フォントサイズ：　font-size:サイズの指定(pt)
→ボールド表示：　font-weight:ボールドの指定(bold/plain)
→イタリックの表示：　font-style:イタリックの指定(italic/plain)
margin
→要素と要素の間の感覚を示すもの
→要素の内側の余白（という認識）
→margin: 5px 5px 5px 5px; 上右下左
padding
→要素の周りに余白を設定するもの
→要素の外側の余白（という認識）
→padding: 5px 5px 5px 5px; 上右下左
要素の位置と大きさについて
→width:要素の横幅の設定
→height:要素の高さの設定
→top:上からの距離を設定
→left:左からの距離を設定
→bottom:下からの距離を設定
→right:右からの距離を設定
position属性（要素の位置の変更）
→static:デフォルト設定。固定、スタイルの指定で変更不可。
→absolute:表示エリア全体の絶対値で設定。
→relative:デフォルトからの相対位置で設定。
Javascriptとは
→プログラミング言語
→Webブラウザの組み込み言語
→HTMLの中にJavascriptを書いておけばWebブラウザが勝手に実行してくれる
Javascriptの書き方
→<script>で囲んで書く
→document.write("書き出すテキスト");
→別ファイルから読み込むことも可能<script src="スクリプトファイル名">
→セミコロンして改行
値とリテラル
→値：数値
→リテラル：文字（literal）※「”（クウォート）」で囲む
変数
→宣言：var 変数名
→代入：変数 = 値
→宣言＆変数：var 変数名 = 値
条件演算子
→等しい：＝＝
→等しくない：！＝
→より小さい：＜
→より大きい：＞
→等しい、またはより小さい＜＝
→等しい、またはより大きい＞＝
代入演算子
→代入（＝）と四則演算（＋－＊／％）を同時に行う
インクリメント
→A++; var x = 10 + A++; →10 ＋ 2 ※足す前に増える
→++A; var x = 10 + ++A; →10 ＋ 1 ※次の足し算から増える
デクリメント
→B--;
→--B;
for
→初期化条件
→条件
→後処理
名前で配列を管理
→配列の書き方：　キー１：値１
→値の出し入れ
→配列[キー] = 値；
→変数 = 配列[キー]；
→番号では呼び出せない
変数のスコープ
→ローカル変数：その変数が宣言された関数の中だけでしか使えない
→グローバル変数：どこでも使える。関数の中でも使うことができる（そのページが閉じられるまで有効）
連想配列とオブジェクト
→ほとんど同じ。
→syohi_zei['tax'] → syohi_zei.tax でも同じ
DOMとは
→ドム。HTMLのタグごとにあるらしい。これでHTMLのオブジェクトを操作できる。
→Document Object Model。タグをオブジェクトとして扱うための仕組み
querySelector
→documentオブジェクトのメソッド。つまりWebページ全体のオブジェクト
→変数 = document.querySelector('要素の指定');
＜？＞プロパティ＝変数？
onloadについて
→イベント。今回は関数を呼び出している。
※いつも思うけどステップ実行のやり方書いてないからいろいろピンと来ないよなー
フォームの利用
→<form method="送信方式" action="送信先">
  …ここにコントロールのタグを用意する…
  </form>
入力フィールドについて（input type）
→いくつか種類がある
ラジオボタン
→name属性を付けるのが基本（グループ化）
labelについて
→ボタンに対応するテキストはこれで表現したほうがいい
<select>
→複数の項目が選択できる
＜？＞DOMよくわかんねぇ
onchange
→すぐ変わる
Canvas
→グラフィックの描画
→draw
getAontext
→グラフィックコンテキストを取り出す
→OSの内部にある描画機能とJSの間を仲立ちする
＜？＞いまは描画をする、ということだけしているのだ
曲線
→点を打って、ベジエでつなぐ
drawImageメソッド
→イメージの描画
→context.drawImage(<Image>,縦位置,横位置);
→context.drawImage(<Image>,縦位置,横位置,横幅,高さ);
→context.drawImage(<Image>,縦位置1,横位置1),横幅1,高さ1,縦位置2,横位置2,横幅2,高さ2);
→Canvasでイメージを利用するための基本のオブジェクト
Imageのオブジェクト作成
→変数 = new Image()
イメージファイルの設定
→≪Image≫.src = "イメージファイルのアドレス"
イメージ読み込みと非同期
→非同期：作業を開始したら、完了していなくても次に進む
→srcを設定した後にdrawImageを実行した場合、魔がイメージが完了していない可能性が高い(4-9では失敗させている)
onlad
→処理が完了してから描画を行う
イメージ描画処理の整理
→１．初期化（最初に必要な準備を行う作業）の処理。イメージの読み込みなど
→２．クリックしたときのイベントの処理
→３．画面をきれいにし、背景を描く処理。今までの表示をリセット
→４．指定の場所にイメージを描画
＜？＞たまに実行されない、PCの問題のようだ
→そもそもクリックしないと描画されないのか
→HTMLでは描画するためのキャンパスを用意しているだけで、クリックしてJSを実行しないから当然か。
taIndex属性
→キーボードで入力ができるようになる
＜？＞私のタイポがひどい。
setIntrvalでアニメーション
→一定時間ごとに処理を繰り返し呼び出す
→変数 = setIntrval(実行する処理, 呼び出す間隔);
→呼び出す間隔　ミリ秒
steIntarvalの実行を停止
→clearInterval(停止する番号);
停止する番号？
→setIntervalで返された識別番号のこと
＜？＞var context = canvas.getContext('2d');
→この’2d’ってなんだっけ？
＜？＞タイポが
＜？＞画面端にいってぶつかるのはわかった。繰り返しの理由は？
→イメージの描画：drawImage関数
→終了がないからか：clearInterval
サーバープログラムを作ろう
→サーバーで動くプログラム
PHP
→HypertextPreprocessorを再帰的に略したもの
→XAMPPは導入済み
<?php?>タグについて
→PHPのスクリプト、この間に書く
echo：値を表示する
→echo 表示する値;
PHPの変数
→$で始まる
変数の埋め込み
→PHPでは「”」で囲むとテキストリテラルへの変数の組み込みが行われる
→「’」だとそのまま表示されるよ
foreach
→配列から順に要素を取り出して処理するための繰り返し構文です
＜？＞ <br>はそのままぶち込んでええんやな
→
→
→
→
→
→
→
→
→
→
→
→











